/**
 * Do not edit this file.  Any changes will be overwritten by the gamedata
 * updater or by upgrading your AMX Mod X install.
 *
 * To override data in this file, create a subdirectory named "custom" and
 * place your own gamedata file(s) inside of it.  Such files will be parsed
 * after AMXX's own.
 *
 * For more information, see http://wiki.alliedmods.net/Gamedata_Updating_(AMX_Mod_X)
 */

"Games"
{
	"#default"
	{
		"Classes"
		{
			"CBaseMonster"
			{
				"Offsets"
				{
					"m_afConditions"  // int
					{
						"windows"   "492"
						"linux"     "512"
						"mac"       "512"
					}

					"m_hEnemy"  // EHANDLE
					{
						"windows"   "496"
						"linux"     "516"
						"mac"       "516"
					}

					"m_hTargetEnt"  // EHANDLE
					{
						"windows"   "504"
						"linux"     "524"
						"mac"       "524"
					}

					"m_hOldEnemy"  // EHANDLE[4]
					{
						"windows"   "512"
						"linux"     "532"
						"mac"       "532"
					}

					"m_vecOldEnemy"  // Vector[4]
					{
						"windows"   "544"
						"linux"     "564"
						"mac"       "564"
					}

					"m_flFieldOfView"  // float
					{
						"windows"   "592"
						"linux"     "612"
						"mac"       "612"
					}

					"m_flWaitFinished"  // float
					{
						"windows"   "596"
						"linux"     "616"
						"mac"       "616"
					}

					"m_flMoveWaitFinished"  // float
					{
						"windows"   "600"
						"linux"     "620"
						"mac"       "620"
					}

					"m_Activity"  // Activity
					{
						"windows"   "604"
						"linux"     "624"
						"mac"       "624"
					}

					"m_IdealActivity"  // Activity
					{
						"windows"   "608"
						"linux"     "628"
						"mac"       "628"
					}

					"m_LastHitGroup"  // int
					{
						"windows"   "612"
						"linux"     "632"
						"mac"       "632"
					}

					"m_MonsterState"  // MONSTERSTATE
					{
						"windows"   "616"
						"linux"     "636"
						"mac"       "636"
					}

					"m_IdealMonsterState"  // MONSTERSTATE
					{
						"windows"   "620"
						"linux"     "640"
						"mac"       "640"
					}

					"m_iTaskStatus"  // int
					{
						"windows"   "624"
						"linux"     "644"
						"mac"       "644"
					}

					"m_pSchedule"  // Schedule_t*
					{
						"windows"   "628"
						"linux"     "648"
						"mac"       "648"
					}

					"m_iScheduleIndex"  // int
					{
						"windows"   "632"
						"linux"     "652"
						"mac"       "652"
					}

					"m_Route"  // struct WayPoint_t[8]
					{
						"windows"   "636"
						"linux"     "656"
						"mac"       "656"
					}

					"m_movementGoal"  // int
					{
						"windows"   "764"
						"linux"     "784"
						"mac"       "784"
					}

					"m_iRouteIndex"  // int
					{
						"windows"   "768"
						"linux"     "788"
						"mac"       "788"
					}

					"m_moveWaitTime"  // float
					{
						"windows"   "772"
						"linux"     "792"
						"mac"       "792"
					}

					"m_vecMoveGoal"  // Vector
					{
						"windows"   "776"
						"linux"     "796"
						"mac"       "796"
					}

					"m_movementActivity"  // Activity
					{
						"windows"   "788"
						"linux"     "808"
						"mac"       "808"
					}

					"m_iAudibleList"  // int
					{
						"windows"   "792"
						"linux"     "812"
						"mac"       "812"
					}

					"m_afSoundTypes"  // int
					{
						"windows"   "796"
						"linux"     "816"
						"mac"       "816"
					}

					"m_vecLastPosition"  // Vector
					{
						"windows"   "800"
						"linux"     "820"
						"mac"       "820"
					}

					"m_iHintNode"  // int
					{
						"windows"   "812"
						"linux"     "832"
						"mac"       "832"
					}

					"m_afMemory"  // int
					{
						"windows"   "816"
						"linux"     "836"
						"mac"       "836"
					}

					"m_iMaxHealth"  // int
					{
						"windows"   "820"
						"linux"     "840"
						"mac"       "840"
					}

					"m_vecEnemyLKP"  // Vector
					{
						"windows"   "824"
						"linux"     "844"
						"mac"       "844"
					}

					"m_cAmmoLoaded"  // int
					{
						"windows"   "836"
						"linux"     "856"
						"mac"       "856"
					}

					"m_afCapability"  // int
					{
						"windows"   "840"
						"linux"     "860"
						"mac"       "860"
					}

					"m_flNextAttack"  // float
					{
						"windows"   "844"
						"linux"     "864"
						"mac"       "864"
					}

					"m_bitsDamageType"  // int
					{
						"windows"   "848"
						"linux"     "868"
						"mac"       "868"
					}

					"m_rgbTimeBasedDamage"  // unsigned char[8]
					{
						"windows"   "852"
						"linux"     "872"
						"mac"       "872"
					}

					"m_lastDamageAmount"  // int
					{
						"windows"   "860"
						"linux"     "880"
						"mac"       "880"
					}

					"m_bloodColor"  // int
					{
						"windows"   "864"
						"linux"     "884"
						"mac"       "884"
					}

					"m_failSchedule"  // int
					{
						"windows"   "868"
						"linux"     "888"
						"mac"       "888"
					}

					"m_flHungryTime"  // float
					{
						"windows"   "872"
						"linux"     "892"
						"mac"       "892"
					}

					"m_flDistTooFar"  // float
					{
						"windows"   "876"
						"linux"     "896"
						"mac"       "896"
					}

					"m_flDistLook"  // float
					{
						"windows"   "880"
						"linux"     "900"
						"mac"       "900"
					}

					"m_iTriggerCondition"  // int
					{
						"windows"   "884"
						"linux"     "904"
						"mac"       "904"
					}

					"m_iszTriggerTarget"  // string_t
					{
						"windows"   "888"
						"linux"     "908"
						"mac"       "908"
					}

					"m_HackedGunPos"  // Vector
					{
						"windows"   "892"
						"linux"     "912"
						"mac"       "912"
					}

					"m_scriptState"  // SCRIPTSTATE
					{
						"windows"   "904"
						"linux"     "924"
						"mac"       "924"
					}

					"m_pCine"  // CCineMonster*
					{
						"windows"   "908"
						"linux"     "928"
						"mac"       "928"
					}

					"m_iClass"  // int
					{
						"windows"   "912"
						"linux"     "932"
						"mac"       "932"
					}

					"m_scheduleList"  // Schedule_t*
					{
						"windows"   "-20"
						"linux"     "0"
						"mac"       "0"
					}
				}
			}
		}
	}
}


/**
 * Class Hierarchy
 * -
 * CBaseEntity
 *     CBaseDelay
 *         CBaseAnimating
 *             CBaseToggle
 *                 CBaseMonster
 */
